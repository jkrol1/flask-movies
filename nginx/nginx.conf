# Define the user that will own and run the Nginx server
user  www-data;
# Define the number of worker processes; recommended value is the number of
# cores that are being used by your server
worker_processes  1;
 
# Define the location on the file system of the error log, plus the minimum
# severity to log messages for
error_log  /var/log/nginx/error.log warn;
# Define the file that will store the process ID of the main NGINX process
pid        /var/run/nginx.pid;
 
 
# events block defines the parameters that affect connection processing.
events {
   # Define the maximum number of simultaneous connections that can be opened by a worker process
   worker_connections  1024;
   # This directive specifies the method to process a connection from the client
   use epoll;
   # The value of this directive specifies the number of events Nginx will transfer to the kernel
   epoll_events 512;
   # This directive allows a worker to accept many connections in the queue at a time
   multi_accept on;
}
 
 
# http block defines the parameters for how NGINX should handle HTTP web traffic
http {
   # Include the file defining the list of file types that are supported by NGINX
   include       /etc/nginx/mime.types;
   # Define the default file type that is returned to the user
   default_type  text/html;
 
   # Define the format of log messages.
   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
 
   # Define the location of the log of access attempts to NGINX
   access_log  /var/log/nginx/access.log  main;
 
   # Define the parameters to optimize the delivery of static content
   sendfile        on;
   tcp_nopush     on;
   tcp_nodelay    on;
 
   # Define the timeout value for keep-alive connections with the client
   keepalive_timeout  65;
 
   # Define the usage of the gzip compression algorithm to reduce the amount of data to transmit
   #gzip  on;

   # This directive, by default, is disabled to allow small packets to wait for a specified period
   # before they are sent at once
   tcp_nopush  on; 
   tcp_nodelay on;
   
   # Enable it if you want implement caching in Nginx
   open_file_cache max=1,000 inactive=30s; 
   # You can use this directive to set a valid period usually in seconds after which the information
   # related to files and directories is re-validated again
   open_file_cache_valid 30s; 
   # Set a minimum number of access to identify which files and directories are actively accessed
   open_file_cache_min_uses 4; 
   # Allow Nginx to cache errors  such as permission denied or cant access this file
   open_file_cache_errors on; 
   
   # Keep connections alive for about 30 seconds
   keepalive_timeout  30s; 
   # Configure a number of requests to keep alive for a specific period of time
   keepalive_requests 30;
   # Set a timeout for transmitting data to the client
   send_timeout      30s;

   # Configure error and access logs to specifically monitor valid and invalid requests
   access_log  logs/access.log   combined; 
   error_log   logs/warn.log     warn;

   # Include additional parameters for virtual host(s)/server(s)
   include /etc/nginx/conf.d/*.conf;

}
